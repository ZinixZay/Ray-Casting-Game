from settings import *

from numba.core import types
from numba.typed import Dict
from numba import int32

import numpy
import pygame


_ = 0
matrix_map = numpy.array(
    [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
     [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1],
     [1, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1],
     [1, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1],
     [1, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 1, _, _, _, _, 1],
     [1, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 1, _, _, _, _, 1],
     [1, _, 1, _, _, 1, _, _, _, _, _, _, _, 1, 1, 1, _, _, 1, _, _, 1, 1, 1],
     [1, _, _, _, 1, 1, 1, _, _, _, _, _, _, 1, 1, 1, _, _, _, _, _, 1, 1, 1],
     [1, _, _, _, _, 1, _, _, _, _, _, _, _, _, 1, _, _, _, 1, _, _, _, _, 1],
     [1, _, 1, 1, _, _, _, _, 1, _, _, 1, _, _, _, _, _, _, 1, _, _, 1, 1, 1],
     [1, _, _, 1, _, _, _, _, 1, 1, 1, 1, _, _, _, _, _, _, 1, _, _, _, _, 1],
     [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1, 1, 1],
     [1, _, _, _, 1, 1, _, 1, 1, _, 1, _, 1, _, 1, _, _, _, 1, _, _, 1, 1, 1],
     [1, _, _, 1, 1, 1, _, _, 1, _, 1, _, 1, _, 1, _, 1, _, 1, _, _, _, _, 1],
     [1, _, _, 1, 1, 1, _, _, 1, _, 1, _, _, _, 1, _, _, _, 1, _, _, 1, 1, 1],
     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
    int
)

WORLD_WIDTH, WORLD_HEIGHT = len(matrix_map[0]) * TILE, len(matrix_map) * TILE
world_map = Dict.empty(key_type=types.UniTuple(int32, 2), value_type=int32)
collision_walls = list()
for j, row in enumerate(matrix_map):
    for i, char in enumerate(row):
        if char:
            collision_walls.append(pygame.Rect(i * TILE, j * TILE, TILE, TILE))
            world_map[(i * TILE, j * TILE)] = char
